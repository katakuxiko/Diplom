package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"math"
	"os"
	"path/filepath"
	"strings"
	"time"

	"os/exec"

	"github.com/gofiber/fiber/v2"
	_ "github.com/lib/pq"
	"github.com/sashabaranov/go-openai"
)

// ---------------- CONFIG ----------------

const (
	embedModelDefault  = "text-embedding-nomic-embed-text-v1.5" // LM Studio embeddings
	chatModelDefault   = "google/gemma-3n-e4b:2"                 // LM Studio chat model
	embedDim           = 768                                     // —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∞ embeddings
	chunkSizeTokens    = 220                                     // –≥—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ "—Ç–æ–∫–µ–Ω–æ–≤" (–ø–æ —Å–ª–æ–≤–∞–º)
	chunkOverlapTokens = 40
	topK               = 5
	maxContextChars    = 12000 // –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ ~3000 —Ç–æ–∫–µ–Ω–æ–≤
)

// ---------------- TYPES ----------------

type Chunk struct {
	ID   string `json:"id"`
	Text string `json:"text"`
}

type AskRequest struct {
	Query string `json:"query"`
	Model string `json:"model,omitempty"` // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: –≤—ã–±—Ä–∞—Ç—å runtime-–º–æ–¥–µ–ª—å
	TopK  int    `json:"topK,omitempty"`  // –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: —Å–∫–æ–ª—å–∫–æ —á–∞–Ω–∫–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å
}

type PgStore struct {
	db *sql.DB
}

// ---------------- GLOBALS ----------------

var (
	ctx       = context.Background()
	dbStore   *PgStore
	oaicl     *openai.Client
	embedName string
	chatName  string
)

// ---------------- MAIN ----------------

func main() {
	// ENV
	pgConn := getenv("PG_CONN", "host=localhost port=5432 user=postgres password=123123 dbname=pdf_ai sslmode=disable")
	baseURL := getenv("LMSTUDIO_BASE_URL", "http://localhost:1234/v1")
	embedName = getenv("EMBED_MODEL", embedModelDefault)
	chatName = getenv("LLM_MODEL", chatModelDefault)

	// DB
	db, err := sql.Open("postgres", pgConn)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err)
	}
	dbStore = &PgStore{db: db}
	if err := ensureSchema(db); err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ö–µ–º—ã:", err)
	}

	// LM Studio client (OpenAI-compatible)
	cfg := openai.DefaultConfig("not-needed")
	cfg.BaseURL = baseURL
	oaicl = openai.NewClientWithConfig(cfg)

	// API
	app := fiber.New()

	app.Get("/health", func(c *fiber.Ctx) error { return c.SendString("ok") })
	app.Get("/models", listModels) // –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–¥–Ω—è—Ç—ã –≤ LM Studio
	app.Post("/ingest", ingestPDF) // –∑–∞–≥—Ä—É–∑–∏—Ç—å PDF –∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å
	app.Post("/ask", askQuestion)  // RAG: –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ + –æ—Ç–≤–µ—Ç LLM

	log.Println("üöÄ Server started at http://localhost:8080")
	log.Fatal(app.Listen(":8080"))
}

// ---------------- HANDLERS ----------------

// /models ‚Äî –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π LM Studio
func listModels(c *fiber.Ctx) error {
	resp, err := oaicl.ListModels(ctx)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": err.Error()})
	}
	return c.JSON(resp.Models)
}

// /ingest ‚Äî –ø—Ä–∏–Ω—è—Ç—å PDF, —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞–Ω–∫–∏+–≤–µ–∫—Ç–æ—Ä—ã
func ingestPDF(c *fiber.Ctx) error {
	file, err := c.FormFile("file")
	if err != nil {
		return c.Status(400).SendString("–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω (form field: file)")
	}
	savePath := filepath.Join("data", "pdfs", timestamped(file.Filename))
	if err := os.MkdirAll(filepath.Dir(savePath), 0o755); err != nil {
		return c.Status(500).SendString("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–∞–ø–∫–∏")
	}
	if err := c.SaveFile(file, savePath); err != nil {
		return c.Status(500).SendString("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞")
	}

	text, err := extractText(savePath)
	if err != nil {
		return c.Status(500).SendString("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è PDF")
	}
	text = sanitize(text)
	print(len(text), "—Å–∏–º–≤–æ–ª–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∏–∑ PDF")

	chunks := chunkByWords(text, chunkSizeTokens, chunkOverlapTokens)
	print(len(chunks), "—á–∞–Ω–∫–æ–≤ —Å–æ–∑–¥–∞–Ω–æ")
	print(chunks[0].Text) // –ø—Ä–∏–º–µ—Ä
	if len(chunks) == 0 {
		return c.Status(400).SendString("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ PDF")
	}

	docName := filepath.Base(savePath)
	okCnt := 0
	for i := range chunks {
		chunks[i].ID = fmt.Sprintf("%s_chunk_%d", docName, i)

		emb, err := getEmbedding(chunks[i].Text)
		if err != nil {
			log.Printf("embedding error for %s: %v", chunks[i].ID, err)
			continue
		}
		if len(emb) != embedDim {
			log.Printf("embedding dim mismatch for %s: got %d want %d", chunks[i].ID, len(emb), embedDim)
			continue
		}
		if err := dbStore.Add(docName, chunks[i], emb); err != nil {
			log.Printf("db insert error for %s: %v", chunks[i].ID, err)
			continue
		}
		okCnt++
	}

	return c.JSON(fiber.Map{
		"status":        "ok",
		"doc":           docName,
		"chunks_total":  len(chunks),
		"chunks_saved":  okCnt,
		"embed_model":   embedName,
		"vector_dim":    embedDim,
		"storage":       "pgvector",
		"table":         "chunks",
		"index":         "ivfflat cosine",
	})
}

// /ask ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç—å RAG: –ø–æ–∏—Å–∫ + –æ—Ç–≤–µ—Ç LLM
func askQuestion(c *fiber.Ctx) error {
	var req AskRequest
	if err := c.BodyParser(&req); err != nil || strings.TrimSpace(req.Query) == "" {
		return c.Status(400).SendString("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –û–∂–∏–¥–∞–µ—Ç—Å—è JSON: {\"query\":\"...\"}")
	}

	modelName := strings.TrimSpace(req.Model)
	if modelName == "" {
		modelName = chatName
	}
	k := req.TopK
	if k <= 0 || k > 20 {
		k = topK
	}

	// 1) embedding –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
	qVec, err := getEmbedding(req.Query)
	if err != nil {
		return c.Status(500).SendString("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è embedding –∑–∞–ø—Ä–æ—Å–∞")
	}

	// 2) –ø–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤
	top, err := dbStore.Search(qVec, k)
	if err != nil {
		return c.Status(500).SendString("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤")
	}
	if len(top) == 0 {
		return c.JSON(fiber.Map{
			"answer":  "–ù–µ –Ω–∞—à—ë–ª —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –±–∞–∑–µ.",
			"context": []Chunk{},
		})
	}
	println(len(top), "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")

	// 3) —Å–±–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –¥–ª–∏–Ω–µ
	var b strings.Builder
	for _, t := range top {
		// –¥–æ–±–∞–≤–∏–º —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∞
		blk := fmt.Sprintf("[%s]\n%s\n\n", t.ID, t.Text)
		if b.Len()+len(blk) > maxContextChars {
			break
		}
		b.WriteString(blk)
	}
	contextText := b.String()
	if contextText == "" && len(top) > 0 {
		// —Ö–æ—Ç—è –±—ã –∫—É—Å–æ–∫ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ
		first := fmt.Sprintf("[%s]\n%s\n\n", top[0].ID, truncateRunes(top[0].Text, maxContextChars/2))
		contextText = first
	}

	// 4) –∑–∞–ø—Ä–æ—Å –∫ chat-–º–æ–¥–µ–ª–∏
	ans, err := askLLM(modelName, req.Query, contextText)
	if err != nil {
		return c.Status(500).JSON(fiber.Map{"error": fmt.Sprintf("–û—à–∏–±–∫–∞ LLM: %v", err)})
	}

	return c.JSON(fiber.Map{
		"answer":  ans,
		"context": top,
		"model":   modelName,
	})
}

// ---------------- PDF / TEXT UTILS ----------------

// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF (rsc.io/pdf)
func extractText(path string) (string, error) {
    cmd := exec.Command("pdftotext", "-enc", "UTF-8", path, "-")
    out, err := cmd.Output()
    if err != nil {
        return "", err
    }
    return string(out), nil
}
// –ü—Ä–æ—Å—Ç–∞—è –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
func sanitize(s string) string {
	s = strings.ReplaceAll(s, "\r", "\n")
	s = strings.ReplaceAll(s, "\t", " ")
	s = strings.Join(strings.Fields(s), " ")
	return s
}

// –†–∞–∑–±–∏–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º —Å overlap
func chunkByWords(text string, size, overlap int) []Chunk {
	words := strings.Fields(text)
	if size <= 0 {
		size = 200
	}
	if overlap < 0 {
		overlap = 0
	}
	var out []Chunk
	for i := 0; i < len(words); i += max(1, size-overlap) {
		end := i + size
		if end > len(words) {
			end = len(words)
		}
		out = append(out, Chunk{Text: strings.Join(words[i:end], " ")})
		if end == len(words) {
			break
		}
	}
	return out
}

func truncateRunes(s string, n int) string {
	if n <= 0 {
		return ""
	}
	rs := []rune(s)
	if len(rs) <= n {
		return s
	}
	return string(rs[:n])
}

// ---------------- EMBEDDINGS ----------------

func getEmbedding(text string) ([]float32, error) {
	model := embedName
	resp, err := oaicl.CreateEmbeddings(ctx, openai.EmbeddingRequest{
		Model: openai.EmbeddingModel(model), // —è–≤–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ string ‚Üí EmbeddingModel
		Input: []string{text},
	})

	if err != nil {
		return nil, err
	}
	emb := resp.Data[0].Embedding
	// openai lib –æ—Ç–¥–∞—ë—Ç []float32 —É–∂–µ, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∏–º
	out := make([]float32, len(emb))
	copy(out, emb)
	return out, nil
}

// ---------------- POSTGRES + PGVECTOR ----------------

func ensureSchema(db *sql.DB) error {
	stmts := []string{
		`CREATE EXTENSION IF NOT EXISTS vector`,
		`CREATE TABLE IF NOT EXISTS chunks (
			id SERIAL PRIMARY KEY,
			doc_name TEXT,
			chunk_id TEXT,
			text TEXT,
			embedding vector(768)
		)`,
		// ivfflat —Ç—Ä–µ–±—É–µ—Ç ANALYZE; —Å–æ–∑–¥–∞–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç
		`DO $$
		BEGIN
			IF NOT EXISTS (
				SELECT 1 FROM pg_class c
				JOIN pg_namespace n ON n.oid=c.relnamespace
				WHERE c.relname='chunks_embedding_ivfflat_idx'
			) THEN
				EXECUTE 'CREATE INDEX chunks_embedding_ivfflat_idx ON chunks USING ivfflat (embedding vector_cosine_ops) WITH (lists=100)';
			END IF;
		END $$;`,
	}
	for _, s := range stmts {
		if _, err := db.Exec(s); err != nil {
			return err
		}
	}
	// –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: ANALYZE –¥–ª—è ivfflat
	_, _ = db.Exec(`ANALYZE chunks`)
	return nil
}

func (s *PgStore) Add(doc string, c Chunk, v []float32) error {
	vec := floatsToPgVectorLiteral(v) // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ [0.1,0.2,...]
	_, err := s.db.Exec(`
		INSERT INTO chunks (doc_name, chunk_id, text, embedding)
		VALUES ($1, $2, $3, $4::vector)
	`, doc, c.ID, c.Text, vec)
	return err
}

func (s *PgStore) Search(q []float32, k int) ([]Chunk, error) {
	if k <= 0 {
		k = 5
	}
	vec := floatsToPgVectorLiteral(q)
	rows, err := s.db.Query(`
		SELECT chunk_id, text
		FROM chunks
		ORDER BY embedding <-> $1::vector
		LIMIT $2
	`, vec, k)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var res []Chunk
	for rows.Next() {
		var c Chunk
		if err := rows.Scan(&c.ID, &c.Text); err != nil {
			return nil, err
		}
		res = append(res, c)
	}
	return res, rows.Err()
}

// pgvector –æ–∂–∏–¥–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç: [0.123,0.456,...]
func floatsToPgVectorLiteral(v []float32) string {
	var sb strings.Builder
	sb.WriteString("[")
	for i, f := range v {
		// –∏—Å–ø–æ–ª—å–∑—É–µ–º %.6f ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è pgvector –∏ —ç–∫–æ–Ω–æ–º–∏—Ç —Ä–∞–∑–º–µ—Ä
		sb.WriteString(fmt.Sprintf("%.6f", float64(f)))
		if i < len(v)-1 {
			sb.WriteString(",")
		}
	}
	sb.WriteString("]")
	return sb.String()
}

// ---------------- LLM (Chat) ----------------

func askLLM(modelName, query, context string) (string, error) {
	// –£–ø—Ä–æ—â–∞–µ–º: –≤—Å—ë –≤ user-—Å–æ–æ–±—â–µ–Ω–∏–µ (LM Studio –∏–Ω–æ–≥–¥–∞ –Ω–µ –ª—é–±–∏—Ç role=system)
	prompt := fmt.Sprintf(
		"–¢—ã —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n%s\n\n–í–æ–ø—Ä–æ—Å: %s\n\n–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º —á–µ—Å—Ç–Ω–æ.",
		context, query,
	)

	resp, err := oaicl.CreateChatCompletion(ctx, openai.ChatCompletionRequest{
		Model: modelName,
		Messages: []openai.ChatCompletionMessage{
			{Role: "user", Content: prompt},
		},
		Temperature: 0.2,
	})
	if err != nil {
		return "", err
	}
	if len(resp.Choices) == 0 {
		return "", fmt.Errorf("LLM –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
	}
	return strings.TrimSpace(resp.Choices[0].Message.Content), nil
}

// ---------------- HELPERS ----------------

func getenv(k, def string) string {
	if v := os.Getenv(k); v != "" {
		return v
	}
	return def
}

func timestamped(name string) string {
	ts := time.Now().Format("20060102_150405")
	return fmt.Sprintf("%s__%s", ts, name)
}

func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}

//
// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –µ—Å–ª–∏ –∫–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è downcast/round:
//
//nolint:unused
func f32round(x float32, p int) float32 {
	scale := float32(math.Pow10(p))
	return float32(math.Round(float64(x*scale))) / scale
}
